// Schema de base de datos para el Bot de Telegram de Expedientes IKE
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant - Organización/Cliente
model Tenant {
  id           String   @id @default(uuid())
  email        String   @unique
  businessName String   @map("business_name")
  password     String   // Hasheado con bcrypt
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  credentials  Credential[]
  expedientes  Expediente[]
  validations  Validation[]
  users        User[]
  settings     TenantSetting[]
  
  @@map("tenants")
}

// Configuraciones del Tenant
model TenantSetting {
  id       String @id @default(uuid())
  tenantId String @map("tenant_id")
  key      String
  value    String
  
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, key])
  @@map("tenant_settings")
}

// Credenciales del portal IKE por tenant
model Credential {
  id        String   @id @default(uuid())
  tenantId  String   @map("tenant_id")
  username  String
  password  String   // Encriptado con crypto-js
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("credentials")
}

// Expedientes procesados
model Expediente {
  id             String    @id @default(uuid())
  tenantId       String    @map("tenant_id")
  expedienteNum  String    @map("expediente_num")
  costoGuardado  Decimal?  @map("costo_guardado") @db.Decimal(10, 2)
  costoSistema   Decimal?  @map("costo_sistema") @db.Decimal(10, 2)
  estado         String    @default("PENDIENTE") // PENDIENTE, LIBERADO, NO_ENCONTRADO
  fechaRegistro  DateTime? @map("fecha_registro")
  servicio       String?
  subservicio    String?
  notas          String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  
  // Relaciones
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  validations Validation[]
  
  @@unique([tenantId, expedienteNum])
  @@map("expedientes")
}

// Historial de validaciones
model Validation {
  id              String   @id @default(uuid())
  expedienteId    String   @map("expediente_id")
  tenantId        String   @map("tenant_id")
  logicaUsada     Int      @map("logica_usada") // 1=exacto, 2=margen±10%, 3=superior
  resultado       String   // ACEPTADO, PENDIENTE, NO_ENCONTRADO
  costoAnterior   Decimal? @map("costo_anterior") @db.Decimal(10, 2)
  costoNuevo      Decimal? @map("costo_nuevo") @db.Decimal(10, 2)
  fechaValidacion DateTime @default(now()) @map("fecha_validacion")
  
  // Relaciones
  expediente Expediente @relation(fields: [expedienteId], references: [id], onDelete: Cascade)
  tenant     Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@map("validations")
}

// Usuarios de Telegram
model User {
  id         String  @id @default(uuid())
  telegramId String  @unique @map("telegram_id")
  tenantId   String? @map("tenant_id")
  username   String?
  firstName  String? @map("first_name")
  lastName   String? @map("last_name")
  isActive   Boolean @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  // Relaciones
  tenant        Tenant?         @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  sessions      UserSession[]
  jobExecutions JobExecution[]
  
  @@map("users")
}

// Sesiones de usuario para el bot
model UserSession {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  sessionId  String   @unique @map("session_id")
  data       String   // JSON con datos de la sesión
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

// Procesamiento de archivos Excel
model ExcelFile {
  id          String   @id @default(uuid())
  tenantId    String   @map("tenant_id")
  fileName    String   @map("file_name")
  fileSize    Int      @map("file_size")
  totalRows   Int      @map("total_rows")
  processedRows Int    @map("processed_rows")
  status      String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, ERROR
  resultPath  String?  @map("result_path")
  errorMessage String? @map("error_message")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  @@map("excel_files")
}

// Jobs programados para revalidación automática
model Job {
  id          String   @id @default(uuid())
  tenantId    String   @map("tenant_id")
  type        String   // REVALIDATION, CLEANUP, etc.
  status      String   @default("PENDING") // PENDING, RUNNING, COMPLETED, FAILED
  scheduledAt DateTime @map("scheduled_at")
  startedAt   DateTime? @map("started_at")
  completedAt DateTime? @map("completed_at")
  result      String?  // JSON con resultado del job
  error       String?
  createdAt   DateTime @default(now()) @map("created_at")
  
  executions JobExecution[]
  
  @@map("jobs")
}

// Ejecuciones de jobs
model JobExecution {
  id        String   @id @default(uuid())
  jobId     String   @map("job_id")
  userId    String?  @map("user_id")
  status    String   // RUNNING, COMPLETED, FAILED
  progress  Int      @default(0) // 0-100
  result    String?  // JSON con detalles del resultado
  startedAt DateTime @default(now()) @map("started_at")
  endedAt   DateTime? @map("ended_at")
  
  job  Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("job_executions")
}

// Logs del sistema
model SystemLog {
  id        String   @id @default(uuid())
  level     String   // INFO, WARN, ERROR
  message   String
  context   String?  // JSON con contexto adicional
  tenantId  String?  @map("tenant_id")
  userId    String?  @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  
  @@index([level, createdAt])
  @@index([tenantId, createdAt])
  @@map("system_logs")
}